{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "uniqueId": {
      "type": "string",
      "defaultValue": "[newGuid()]"
    },
    "rgName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resourceGroup to create"
      }
    },
    "rgLocation": {
      "type": "string",
      "metadata": {
        "description": "Location for the resourceGroup"
      }
    },
    "psUId": {
      "type": "string",
      "metadata": {
        "description": "Powershell User Unique Id Suffix"
      }
    },
    "roleDefinitionId": {
      "type": "string",
      "defaultValue": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
      "metadata": {
        "description": "roleDefinition to apply to the resourceGroup - default is Owner"
      }
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "searchServiceSku": {
      "type": "string",
      "defaultValue": "free",
      "allowedValues": [
        "free",
        "basic",
        "standard",
        "standard2",
        "standard3",
        "storage_optimized_l1",
        "storage_optimized_l2"
      ],
      "metadata": {
        "description": "The pricing tier of the search service you want to create (for example, basic or standard)."
      }
    },
    "replicaCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 12,
      "metadata": {
        "description": "Replicas distribute search workloads across the service. You need at least two replicas to support high availability of query workloads (not applicable to the free tier)."
      }
    },
    "partitionCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2,
        3,
        4,
        6,
        12
      ],
      "metadata": {
        "description": "Partitions allow for scaling of document count as well as faster indexing by sharding your index over multiple search units."
      }
    },
    "hostingMode": {
      "type": "string",
      "defaultValue": "default",
      "allowedValues": [
        "default",
        "highDensity"
      ],
      "metadata": {
        "description": "Applicable only for SKUs set to standard3. You can set this property to enable a single, high density partition that allows up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU."
      }
    },
    "cognitiveServicesSku": {
      "type": "string",
      "defaultValue": "S0",
      "allowedValues": [
        "S0",
        "F0"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "hostingPlanSku": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "The pricing tier for the App Service plan"
      }
    },
    "gitRepo": {
      "type": "string",
      "defaultValue": "https://github.com/davideker/azureskills"
    },
    "gitBranch": {
      "type": "string",
      "defaultValue": "main"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2019-10-01",
      "name": "[parameters('rgName')]",
      "location": "[parameters('rgLocation')]",
      "tags": {
        "Note": "subscription level deployment"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "azure-search",
      "resourceGroup": "[parameters('rgName')]",
      "dependsOn": [
        "[parameters('rgName')]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "id": {
            "value": "[uniqueString(parameters('rgName'), deployment().name, parameters('uniqueId'))]"
          },
          "psUserRG": {
            "value": "[concat('powershell-automation-',parameters('psUId'))]"
          },
          "psUserName": {
            "value": "[concat('powershellAutomation',parameters('psUId'))]"
          },
          "roleDefinitionId": {
            "value": "[parameters('roleDefinitionId')]"
          },
          "storageAccountSku": {
            "value": "[parameters('storageAccountSku')]"
          },
          "searchServiceSku": {
            "value": "[parameters('searchServiceSku')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "partitionCount": {
            "value": "[parameters('partitionCount')]"
          },
          "hostingMode": {
            "value": "[parameters('hostingMode')]"
          },
          "cognitiveServicesSku": {
            "value": "[parameters('cognitiveServicesSku')]"
          },
          "hostingPlanSku": {
            "value": "[parameters('hostingPlanSku')]"
          },
          "gitRepo": {
            "value": "[parameters('gitRepo')]"
          },
          "gitBranch": {
            "value": "[parameters('gitBranch')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "id": {
              "type": "string"
            },
            "psUserRG": {
              "type": "string"
            },
            "psUserName": {
              "type": "string"
            },
            "roleDefinitionId": {
              "type": "string"
            },
            "storageAccountSku": {
              "type": "string"
            },
            "searchServiceSku": {
              "type": "string"
            },
            "replicaCount": {
              "type": "int"
            },
            "partitionCount": {
              "type": "int"
            },
            "hostingMode": {
              "type": "string"
            },
            "cognitiveServicesSku": {
              "type": "string"
            },
            "hostingPlanSku": {
              "type": "string"
            },
            "gitRepo": {
              "type": "string"
            },
            "gitBranch": {
              "type": "string"
            }
          },
          "variables": {
            "storageAccount": "[concat('storage', parameters('id'))]",
            "roleAssignment": "[guid(concat('powershell-role-', parameters('id')))]",
            "managedUser": "[concat(deployment().name, '-identity-', parameters('id'))]",
            "searchService": "[concat(deployment().name, '-service-', parameters('id'))]",
            "cognitiveService": "[concat(deployment().name, '-cognitive-service-', parameters('id'))]",
            "powershellUser": "[resourceId(parameters('psUserRG'), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('psUserName'))]",
            "websiteName": "[concat(deployment().name, '-site-',  parameters('id'))]",
            "hostingPlanName": "[concat(deployment().name,'-hosting-',  parameters('id'))]",
            "functionAppName": "[concat(deployment().name, '-function-app-',  parameters('id'))]"
          },
          "resources": [
            {
              "name": "DontDelete",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "properties": {
                "level": "CanNotDelete",
                "notes": "Prevent deletion of the resourceGroup"
              }
            },
            {
              "name": "[variables('managedUser')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "location": "[resourceGroup().location]"
            },
            {
              "name": "[variables('roleAssignment')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-03-01-preview",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                "principalId": "[reference(variables('powershellUser'), '2018-11-30').principalId]",
                "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('managedUser'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[variables('storageAccount')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false
              },
              "resources": [
                {
                  "type": "blobServices/containers",
                  "apiVersion": "2019-06-01",
                  "name": "[concat('default/', 'blob-datasource')]",
                  "properties": {
                    "publicAccess": "None"
                  },
                  "dependsOn": [
                    "[variables('storageAccount')]"
                  ]
                }
              ],
              "dependsOn": [
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2020-08-01",
              "name": "[variables('searchService')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[toLower(parameters('searchServiceSku'))]"
              },
              "properties": {
                "replicaCount": "[parameters('replicaCount')]",
                "partitionCount": "[parameters('partitionCount')]",
                "hostingMode": "[parameters('hostingMode')]",
                "networkRuleSet": {
                  "ipRules": []
                }
              }
            },
            {
              "name": "[variables('cognitiveService')]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2017-04-18",
              "sku": {
                "name": "[parameters('cognitiveServicesSku')]"
              },
              "kind": "CognitiveServices",
              "location": "[resourceGroup().location]",
              "properties": {}
            },
            {
              "apiVersion": "2018-02-01",
              "name": "[variables('hostingPlanName')]",
              "type": "Microsoft.Web/serverfarms",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('hostingPlanSku')]",
                "tier": "Dynamic"
              },
              "properties": {
                "name": "[variables('hostingPlanName')]",
                "computeMode": "Dynamic"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2016-08-01",
              "name": "[variables('websiteName')]",
              "location": "[resourceGroup().location]",
              "dependsOn": [ "[variables('hostingPlanName')]" ],
              "properties": {
                "serverFarmId": "[variables('hostingPlanName')]"
              }
            },
            {
              "apiVersion": "2015-08-01",
              "type": "Microsoft.Web/sites",
              "name": "[variables('functionAppName')]",
              "location": "[resourceGroup().location]",
              "kind": "functionapp",
              "dependsOn": [
                "[variables('hostingPlanName')]",
                "[variables('storageAccount')]"
              ],
              "properties": {
                "name": "[variables('functionAppName')]",
                "serverFarmId": "[variables('hostingPlanName')]",
                "resourceGroup": "[resourceGroup().name]",
                "httpsOnly": true,
                "clientAffinityEnabled": false,
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "dotnet"
                    },
                    {
                      "name": "AzureWebJobsDotNetReleaseCompilation",
                      "value": true
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccount'), ';AccountKey=',listKeys(variables('storageAccount'), '2019-04-01').keys[0].value, ';EndpointSuffix=', environment().suffixes.storage)]"
                    },
                    {
                      "name": "AzureWebJobsDashboard",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccount'), ';AccountKey=',listKeys(variables('storageAccount'), '2019-04-01').keys[0].value, ';EndpointSuffix=', environment().suffixes.storage)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccount'), ';AccountKey=',listKeys(variables('storageAccount'), '2019-04-01').keys[0].value, ';EndpointSuffix=', environment().suffixes.storage)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[toLower(variables('functionAppName'))]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~3"
                    }

                  ],
                  "cors": {
                    "allowedOrigins": [
                      "[concat('https://', variables('websiteName'), '.azurewebsites.net')]"
                    ]
                  },
                  "minTlsVersion": "1.2"
                }
              },
              "resources": [
                {
                  "apiVersion": "2019-08-01",
                  "condition": "[contains(parameters('gitRepo'),'http')]",
                  "type": "sourcecontrols",
                  "name": "web",
                  "location": "[resourceGroup().location]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
                  ],
                  "properties": {
                    "repoUrl": "[parameters('gitRepo')]",
                    "branch": "[parameters('gitBranch')]",
                    "isManualIntegration": true
                  }
                }
              ]
            },
            {
              "name": "[concat(deployment().name, '-powershell-',parameters('id'))]",
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2019-10-01-preview",
              "location": "[resourceGroup().location]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[variables('powershellUser')]": {}
                }
              },
              "properties": {
                "forceUpdateTag": 1,
                "azPowerShellVersion": "3.0",
                "storageAccountSettings": {
                  "storageAccountName": "[variables('storageAccount')]",
                  "storageAccountKey": "[listKeys(variables('storageAccount'), '2019-04-01').keys[0].value]"
                },
                "timeout": "PT30M",
                "arguments": "[format('-rgName \"{0}\" -svcName \"{1}\" -storageAccount \"{2}\" -functionAppName \"{3}\"', 
                  resourceGroup().name, 
                  variables('searchService'), 
                  variables('storageAccount'),
                  variables('functionAppName'))]",
                "environmentVariables": [],
                "scriptContent": "
                  param(
                    [string] [Parameter(Mandatory=$true)] $rgName,
                    [string] [Parameter(Mandatory=$true)] $svcName,
                    [string] [Parameter(Mandatory=$true)] $storageAccount,
                    [string] [Parameter(Mandatory=$true)] $functionAppName
                  )

                  Install-Module -Name Az.Search -Force
                  Get-Command -Module Az.Search

                  $indexName = $rgName + '-index'
                  $skillsetName =  $rgName + '-skills' 
                  $indexerName = $rgName + '-indexer'
                  $searchSvcApiKey = $(Get-AzSearchAdminKeyPair -ResourceGroupName $rgName -ServiceName $svcName).Primary
                  $storageApiKey = $(Get-AzStorageAccountKey -ResourceGroupName $rgName -Name $storageAccount).value[0]

                  $headers = @{
                    'api-key' = $searchSvcApiKey 
                    'Content-Type' = 'application/json' 
                    'Accept' = 'application/json' 
                  }

                  $headers
                  $storageApiKey
                  $searchSvcApiKey
                  
                  Write-Host ************************************ Create Index ************************************
                  $body = '{
                  ''name'': ''' + $indexName + ''',  
                  ''fields'': [
                      { ''name'': ''id'', ''type'': ''Edm.String'', ''key'': true, ''filterable'': true },
                      { ''name'': ''result'',  ''type'': ''Edm.String'', ''searchable'': true, ''filterable'': false, ''sortable'': true,  ''facetable'': false },
                      { ''name'': ''content'', ''type'': ''Edm.String'', ''searchable'': true, ''filterable'': false, ''sortable'': false, ''facetable'': false },
                      { ''name'': ''text'',    ''type'': ''Edm.String'', ''searchable'': true, ''filterable'': false, ''sortable'': false, ''facetable'': false },
                      { ''name'': ''layout'',  ''type'': ''Edm.String'', ''searchable'': false,''filterable'': false, ''sortable'': false, ''facetable'': false },
                      { ''name'': ''file'',   ''type'': ''Edm.String'', ''searchable'': false,''filterable'': false, ''sortable'': false, ''facetable'': false }
                    ]
                  }'
                  $body 
                  $url = 'https://'+  $svcName  + '.search.windows.net/indexes/' + $indexName + '?api-version=2020-06-30'
                  $url
                  Invoke-RestMethod -Uri $url -Headers $headers -Method Put -Body $body | ConvertTo-Json
                  Write-Host ******************************************************************************************

                  Write-Host ************************************ Create Skillset ************************************ 
                  $functionKey = Invoke-AzResourceAction -ResourceId ($(Get-AzResourceGroup -Name $rgName).ResourceId + '/providers/Microsoft.Web/sites/{0}/functions/{1}' -f $functionAppName, 'EchoJson') -Action 'listkeys' -ApiVersion '2019-08-01' -Force
                  $functionName
                  $functionKey
                  $body = '{
                    ''description'': ''Extract entities, detect language and extract key-phrases'',
                    ''skills'':
                      [{
                        ''@odata.type'': ''#Microsoft.Skills.Vision.OcrSkill'',
                        ''description'': ''Extract text (plain and structured) from image.'',
                        ''context'': ''/document/normalized_images/*'',
                        ''textExtractionAlgorithm'': null,
                        ''lineEnding'': ''Space'',
                        ''defaultLanguageCode'': ''en'',
                        ''detectOrientation'': true,
                        ''inputs'': [
                          {
                            ''name'': ''image'',
                            ''source'': ''/document/normalized_images/*''
                          }
                        ],
                        ''outputs'': [
                          {
                            ''name'': ''text'',
                            ''targetName'': ''text''
                          },
                          {
                            ''name'': ''layoutText'',
                            ''targetName'': ''layoutText''
                          }
                        ]
                      },
                      {
                        ''@odata.type'': ''#Microsoft.Skills.Text.MergeSkill'',
                        ''description'': ''Create merged_text, which includes all the textual representation of each image inserted at the right location in the content field.'',
                        ''context'': ''/document'',
                        ''insertPreTag'': '' '',
                        ''insertPostTag'': '' '',
                        ''inputs'': [
                          {
                            ''name'': ''text'',
                            ''source'': ''/document/content''
                          },
                          {
                            ''name'': ''itemsToInsert'',
                            ''source'': ''/document/normalized_images/*/text''
                          },
                          {
                            ''name'': ''offsets'',
                            ''source'': ''/document/normalized_images/*/contentOffset''
                          }
                        ],
                        ''outputs'': [
                          {
                            ''name'': ''mergedText'',
                            ''targetName'': ''merged_text''
                          }
                        ]
                      },
                      {
                        ''@odata.type'': ''#Microsoft.Skills.Text.EntityRecognitionSkill'',
                        ''categories'': [ ''Person'', ''Organization'', ''Location'' ],
                        ''defaultLanguageCode'': ''en'',
                        ''inputs'': [
                          { ''name'': ''text'', ''source'': ''/document/content'' }
                        ],
                        ''outputs'': [
                          { ''name'': ''persons'', ''targetName'': ''persons'' },
                          { ''name'': ''organizations'', ''targetName'': ''organizations'' },
                          { ''name'': ''locations'', ''targetName'': ''locations'' }
                        ]
                      },
                      {
                        ''@odata.type'': ''#Microsoft.Skills.Text.LanguageDetectionSkill'',
                        ''inputs'': [
                          { ''name'': ''text'', ''source'': ''/document/content'' }
                        ],
                        ''outputs'': [
                          { ''name'': ''languageCode'', ''targetName'': ''languageCode'' }
                        ]
                      },
                      {
                        ''@odata.type'': ''#Microsoft.Skills.Text.SplitSkill'',
                        ''textSplitMode'' : ''pages'',
                        ''maximumPageLength'': 4000,
                        ''inputs'': [
                          { ''name'': ''text'', ''source'': ''/document/content'' },
                          { ''name'': ''languageCode'', ''source'': ''/document/languageCode'' }
                        ],
                        ''outputs'': [
                          { ''name'': ''textItems'', ''targetName'': ''pages'' }
                        ]
                      },
                      {
                        ''@odata.type'': ''#Microsoft.Skills.Text.KeyPhraseExtractionSkill'',
                        ''context'': ''/document/pages/*'',
                        ''inputs'': [
                          { ''name'': ''text'', ''source'': ''/document/pages/*'' },
                          { ''name'':''languageCode'', ''source'': ''/document/languageCode'' }
                        ],
                        ''outputs'': [
                          { ''name'': ''keyPhrases'', ''targetName'': ''keyPhrases'' }
                        ]
                      },
                      {
                        ''@odata.type'': ''#Microsoft.Skills.Custom.WebApiSkill'',
                        ''description'': ''Custom Skill'',
                        ''uri'': ''https://' + $functionAppName + '.azurewebsites.net/api/EchoJson?code=' + ($functionKey).default + ''',
                        ''context'': ''/document'',
                        ''inputs'': [
                          {
                            ''name'': ''text'',
                            ''source'': ''/document/content''
                          },
                          {
                            ''name'': ''image'',
                            ''source'': ''/document/normalized_images/0/data''
                          },
                          {
                            ''name'': ''json'',
                            ''source'': ''/document/normalized_images/0/layoutText''
                          }
                        ],
                        ''outputs'': [
                          {
                            ''name'': ''text'',
                            ''targetName'': ''result''
                          }
                        ]
                      }
                    ]
                  }'
                  $body 
                  $url = 'https://'+  $svcName  + '.search.windows.net/skillsets/' + $skillsetName + '?api-version=2020-06-30'
                  $url
                  Invoke-RestMethod -Uri $url -Headers $headers -Method Put -Body $body | ConvertTo-Json
                  Write-Host ******************************************************************************************


                  Write-Host ************************************ Create Datasource ************************************
                  $body = '{
                      ''name'' : ''blob-datasource'',
                      ''type'' : ''azureblob'',
                      ''credentials'' : { ''connectionString'' : ''DefaultEndpointsProtocol=https;AccountName=' + $storageAccount + ';AccountKey=' + $storageApiKey + ';EndpointSuffix=core.windows.net'' },
                      ''container'' : { ''name'' : ''blob-datasource''} 
                  }'
                  $body 
                  $url = 'https://'+  $svcName  + '.search.windows.net/datasources?api-version=2020-06-30'
                  $url
                  Invoke-RestMethod -Uri $url -Headers $headers -Method Post -Body $body | ConvertTo-Json
                  Write-Host ******************************************************************************************

                  Write-Host ************************************ Create Indexer ************************************
                  $body = '{
                    ''name'':'''+ $indexerName +''',	
                    ''dataSourceName'' : ''blob-datasource'',
                    ''targetIndexName'' : ''' + $indexName + ''',
                    ''skillsetName'' : '''+ $skillsetName + ''',
                    ''fieldMappings'' : [
                      {
                          ''sourceFieldName'':''metadata_storage_name'',
                          ''targetFieldName'' : ''id'',
                          ''mappingFunction'': {
                            ''name'': ''base64Encode''
                          }
                      }
                    ],
                    ''outputFieldMappings'' : [
                      {
                        ''sourceFieldName'': ''/document/result'',
                        ''targetFieldName'': ''result''
                      },
                      {
                        ''sourceFieldName'': ''/document/content'',
                        ''targetFieldName'': ''content''
                      },
                      {
                        ''sourceFieldName'': ''/document/normalized_images/0/text'',
                        ''targetFieldName'': ''text''
                      },
                      {
                        ''sourceFieldName'': ''/document/normalized_images/0/layoutText'',
                        ''targetFieldName'': ''layout''
                      },
                      {
                        ''sourceFieldName'': ''/document/normalized_images/0/data'',
                        ''targetFieldName'': ''file''
                      }
                    ],
                    ''parameters'': {
                      ''maxFailedItems'' : ''15'', 
                      ''batchSize'' : ''100'', 
                      ''configuration'': {
                      ''dataToExtract'': ''contentAndMetadata'',
                      ''parsingMode'':''default'',
                      ''allowSkillsetToReadFileData'':true,
                      ''imageAction'': ''generateNormalizedImagePerPage''
                      }
                    }
                  }'
                  $body 
                  $url = 'https://'+  $svcName  + '.search.windows.net/indexers?api-version=2020-06-30'
                  $url
                  Invoke-RestMethod -Uri $url -Headers $headers -Method Post -Body $body | ConvertTo-Json
                  Write-Host ******************************************************************************************
                ",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
              },
              "dependsOn": [
                "[variables('storageAccount')]",
                "[variables('searchService')]",
                "[variables('cognitiveService')]",
                "[variables('roleAssignment')]",
                "[variables('hostingPlanName')]",
                "[variables('websiteName')]",
                "[variables('functionAppName')]",
                "[resourceId('Microsoft.Web/Sites/sourcecontrols', variables('functionAppName'), 'web')]"
              ]
            }
          ]
        }
      }
    }
  ],
  "outputs": {
  }
}